{
  "TypeScript Arrow Function": {
    "prefix": "etsf",
    "body": [
      "export const ${1:functionName} = (${2:params}): ${3:ReturnType} => {",
      "\t${4:// Implementation}",
      "\treturn ${5:result};",
      "};",
    ],
    "description": "Create a TypeScript function",
  },
  "Zod Schema": {
    "prefix": "zod",
    "body": [
      "import { z } from 'zod';",
      "",
      "export const ${1:schemaName}Schema = z.object({",
      "\t${2:property}: z.${3:string}(),",
      "});",
      "",
      "export type ${1:schemaName} = z.infer<typeof ${1:schemaName}Schema>;",
    ],
    "description": "Create a Zod schema with TypeScript type",
  },
  "Zod variable": {
    "prefix": "zodvar",
    "body": [
      "export const ${1:varName}Schema = z.object({});",
      "\t",
      "export type ${1:varName} = z.infer<typeof ${1:varName}Schema>;",
    ],
    "description": "Create a Zod variable",
  },
  "Export TypeScript Interface": {
    "prefix": "tsi",
    "body": ["export interface ${1:InterfaceName} {", "\t${2:property}: ${3:type};", "}"],
    "description": "Create a TypeScript interface",
  },
  "Export TypeScript Type": {
    "prefix": "etst",
    "body": ["export type ${1:TypeName} = ${2:type};"],
    "description": "Create a TypeScript type",
  },
  "Async Try-Catch": {
    "prefix": "tryc",
    "body": [
      "try {",
      "} catch (error) {",
      "\tconsole.error('Error in ${2:function}:', error);",
      "\t${3:// Error handling}",
      "}",
    ],
    "description": "Create a try-catch block for async operations",
  },
  "Console Log with Context": {
    "prefix": "clog",
    "body": ["console.log('${1:context}:', JSON.stringify(${2:data}, null, 2));"],
    "description": "Console log with context and formatted JSON",
  },
  "Declare Expororting Async function": {
    "prefix": "edaf",
    "body": [
      "export async function ${1:functionName}(${2:params}): Promise<${3:ReturnType}> {",
      "\t${4:// Implementation}",
      "\treturn {};",
      "}",
    ],
    "description": "Declare an async function with Promise return type",
  },
  "Declare Exporting Function": {
    "prefix": "edf",
    "body": ["export function ${1:functionName}(${2:params}): ${3:ReturnType} {", "\treturn {};", "}"],
    "description": "Declare a function with return type",
  },

  "AWS Lambda Imports": {
    "prefix": "lambdaimp",
    "body": ["import { createApiGatewayFunction, CustomError, extractMetadata } from '@/libs';"],
    "description": "Import necessary modules for AWS Lambda",
  },
  "AWS Lambda Handler": {
    "prefix": "lambda-api",
    "body": [
      "",
      "export const ${3:handlerName} = createApiGatewayFunction(async (event) => {",
      "\t${4:// Implementation}",
      "\treturn await ${1:serviceName}Service();",
      "});",
    ],
    "description": "Create an AWS Lambda handler with createApiGatewayFunction",
  },
  "AWS Lambda With Path variable": {
    "prefix": "lambdapath",
    "body": [
      "export const get${3:EntityName}ById = createApiGatewayFunction(async (event) => {",
      "\tconst { pathParams } = extractMetadata(event);",
      "\tif (!pathParams || !pathParams.id) throw new CustomError('Path param id is missing!');",
      "",
      "\treturn await ${1:serviceName}Service(pathParams.id);",
      "});",
    ],
    "description": "Create a Lambda handler with path variable",
  },
  "Lambda Query": {
    "prefix": "lambdaquery",
    "body": [
      "export const get${3:EntityName}sByQuery = createApiGatewayFunction(async (event) => {",
      "\tconst { queryParams } = extractMetadata(event);",
      "\tif (!queryParams) throw new CustomError('Query params are missing!');",
      "",
      "\tconst parseResult = QueryRequestSchema.safeParse({ indexName: queryParams.index, ...queryParams });",
      "",
      "\tif (!parseResult.success) {",
      "\t\tconst validationErrors = parseResult.error.issues.map((err) => err.path.join('.')).join(', ');",
      "\t\tthrow new CustomError(`Query params are missing!, \\${validationErrors}`);",
      "\t}",
      "});",
    ],
    "description": "Create a Lambda handler for query operations",
  },
  "Dynamo Service Get Functions": {
    "prefix": "dynamo-srv-get",
    "body": [
      "import type { OptPartial${1:EntityName}, Queried${1:EntityName}s } from '@/repository/${2:entityName}';",
      "import {",
      "\tget${1:EntityName}ById as get${1:EntityName}ByIdRepo,",
      "\tget${1:EntityName}sByQuery as get${1:EntityName}sByQueryRepo,",
      "\tget${1:EntityName}TableDescription",
      "} from '@/repository/${1:entityName}';",
      "import type { DescribeTableCommandOutput, QueryRequest as Query } from '@/libs/dynamo';",
      "",
      "export async function get${1:EntityName}TableDesc(): Promise<DescribeTableCommandOutput> {",
      "\treturn await get${1:EntityName}TableDescription();",
      "}",
      "",
      "export async function get${1:EntityName}ById(id: string, proj?: string): Promise<OptPartial${1:EntityName}> {",
      "\treturn await get${1:EntityName}ByIdRepo(id, proj);",
      "}",
      "",
      "export async function get${1:EntityName}sByQuery(query: Query, proj?: string): Promise<Queried${1:EntityName}s> {",
      "\treturn await get${1:EntityName}sByQueryRepo(query, proj);",
      "}",
    ],
  },
  "Dynamo Service Create Function": {
    "prefix": "dynamo-srv-create",
    "body": [
      "import type { ${1:EntityName} } from '@/@types/';",
      "import { create${1:EntityName} as create${1:EntityName}Repo } from '@/repository/repo';",
      "",
      "export async function create${1:EntityName}(newItem: ${1:EntityName}): Promise<${1:EntityName}> {",
      "\treturn await create${1:EntityName}Repo(newItem);",
      "}",
    ],
  },
  "Dynamo Service Update Function": {
    "prefix": "dynamo-srv-update",
    "body": [
      "import type { ${1:EntityName} } from '@/@types/';",
      "import { update${1:EntityName} as update${1:EntityName}Repo } from '@/repository/';",
      "import { CustomError } from '@/libs/error';",
      "import { get${1:EntityName}ById } from './';",
      "",
      "export async function update${1:EntityName}(id: string, update: object): Promise<${1:EntityName}> {",
      "\tconst item = (await get${1:EntityName}ById(id)) as ${1:EntityName};",
      "\tif (!item) throw new CustomError(`Item with id: ${id} not found`, 404);",
      "",
      "\treturn await update${1:EntityName}Repo({ ...update, ...item } as ${1:EntityName});",
      "}",
    ],
  },
  "DynamoDB Repository": {
    "prefix": "dynamo",
    "body": [
      "import type { ${1:ExampleItem} } from '';",
      "import type {",
      "\tDescribeTableCommandOutput,",
      "\tCustomQueryCommandOutput as QueryOutput,",
      "\tQueryRequest as Query",
      "} from '@/libs/dynamo';",
      "import { createRecord, getRecordByKey, getTableDescription, queryRecords, updateRecord } from '@/libs/dynamo';",
      "import { omit } from '@/libs/utility';",
      "",
      "",
      "export type Queried${1:ExampleItem}s = QueryOutput<Partial${1:ExampleItem}>",
      "export type Partial${1:ExampleItem} = Partial<${1:ExampleItem}>;",
      "export type OptPartial${1:ExampleItem} = Partial<${1:ExampleItem}> | undefined;",
      "export type Optional${1:ExampleItem} = ${1:ExampleItem} | undefined;",
      "type ExtraType = Record<string, unknown>;",
      "",
      "const TABLE_NAME = '${2:tableName}';",
      "",
      "async function get${1:ExampleItem}TableDescription(): Promise<DescribeTableCommandOutput> {",
      "\treturn await getTableDescription(TABLE_NAME);",
      "}",
      "",
      "async function get${1:ExampleItem}ById(id: string, proj?: string): Promise<OptPartial${1:ExampleItem}> {",
      "\tconst params = {",
      "\t\ttableName: TABLE_NAME,",
      "\t\tkey: { id },",
      "\t\tprojectionExpression: proj",
      "\t};",
      "",
      "\treturn await getRecordByKey<Partial${1:ExampleItem}>(params);",
      "}",
      "",
      "async function get${1:ExampleItem}sByQuery(query: Query, proj?: string): Promise<Queried${1:ExampleItem}s> {",
      "\treturn await queryRecords<Partial<${1:ExampleItem}>>({",
      "\t\ttableName: TABLE_NAME,",
      "\t\tqueryRequest: query,",
      "\t\tprojectionExpression: proj",
      "\t});",
      "}",
      "",
      "async function create${1:ExampleItem}(newItem: ${1:ExampleItem}): Promise<${1:ExampleItem}> {",
      "\treturn await createRecord<${1:ExampleItem}>({ tableName: TABLE_NAME, item: newItem });",
      "}",
      "",
      "async function update${1:ExampleItem}(item: ${1:ExampleItem}, con?: string, ext?: ExtraType): Promise<${1:ExampleItem}> {",
      "\tawait updateRecord<${1:ExampleItem}>({",
      "\t\ttableName: TABLE_NAME,",
      "\t\tkey: { id: item.id },",
      "\t\titem: omit(item, ['id']),",
      "\t\tconditionExpression: con,",
      "\t\textraExpressionAttributeValues: ext,",
      "\t\treturnValues: 'NONE'",
      "\t});",
      "\treturn await item;",
      "}",
      "",
      "export { get${1:ExampleItem}TableDescription, get${1:ExampleItem}ById, get${1:ExampleItem}sByQuery, create${1:ExampleItem}, update${1:ExampleItem} };",
    ],
    "description": "Create a complete DynamoDB service with custom repo functions",
  },
}
